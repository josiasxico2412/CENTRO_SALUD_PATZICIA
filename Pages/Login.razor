
@page "/"
@using CENTRO_SALUD_PATZICIA.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject UserAccountService userAccountService
@inject NavigationManager navigation
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>INICIO DE SESIÓN</PageTitle>

<div class="header-container">
    <div class="top-banner">
        <span>ESTAMOS PARA SERVIR Y LA POBLACIÓN Y AYUDARLOS A MEJORAR SU CALIDAD DE VIDA</span>
    </div>
    <div class="main-title">CENTRO DE SALUD PATZICIA</div>
</div>

<div class="login-container">
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="login-box">
            <div class="text-center mb-4">
                <h3>Inicio de Sesión</h3>
            </div>
            <div class="mb-3">
                <label for="username">Nombre Usuario</label>
                <input @bind="model.UserName" id="username" class="form-control" placeholder="Ingrese Usuario" />
            </div>
            <div class="mb-3">
                <label for="password">Contraseña Usuario</label>
                <input @bind="model.Password" type="password" id="password" class="form-control" placeholder="Contraseña Usuario" />
            </div>
            <div class="d-grid gap-2">
                <button @onclick="Authenticate" class="btn btn-outline-info login-button">
                    Ingresar
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert","Usuario o Contraseña Invalida");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.userName,
            Role = userAccount.Role
        });

        navigation.NavigateTo("/inicio", true);
    }
}
